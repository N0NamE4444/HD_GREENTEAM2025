# .github/workflows/graphql‐smoke-tests.yml
name: CI - GraphQL Smoke Tests (OAuth2 login)

on:
  push:
    branches: [ pipelines ]
  pull_request:
    branches: [ pipelines ]

jobs:
  graphql-introspection:
    name: GraphQL Introspection Smoke Tests (port 33001)
    runs-on: ubuntu-latest

    env:
      TZ: Europe/Prague
      # Přihlášení na OAuth endpoint (demo uživatel):
      DEMO_EMAIL: john.newbie@world.com
      DEMO_PASSWORD: john.newbie@world.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Start Docker Compose stack
        run: |
          echo "==> Spouštím Docker Compose stack na pozadí..."
          docker compose -f docker-compose.hk2025.yml up -d --build

      - name: Wait for services to be healthy
        run: |
          echo "Čekám 30 sekund, aby služby absolvovaly healthcheck..."
          sleep 30

      - name: Check running containers
        run: |
          echo "=== Seznam všech Docker kontejnerů před introspekcí: ==="
          docker ps -a

      - name: Perform OAuth2 login (get session cookie)
        run: |
          echo "==> Provádím OAuth2 login na http://localhost:33001/oauth/login2?redirect_uri=/ …"
          # Vytvoříme cookie-jar file, který curl uloží z odpovědi
          COOKIE_JAR="cookies.txt"
          # Odesíláme POST s přihlášením (form‐encoding). 
          # Předpokládáme, že pole ve formuláři jsou `email` a `password`.
          # Pokud se liší, upravte klíče `email=` a `password=`.
          curl -s -c "$COOKIE_JAR" -L -X POST "http://localhost:33001/oauth/login2?redirect_uri=/" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "email=${{ env.DEMO_EMAIL }}&password=${{ env.DEMO_PASSWORD }}" \
            -o /dev/null

          # Krátké otestování, zda cookie byla uložena:
          if [ ! -s "$COOKIE_JAR" ]; then
            echo "❌ Chyba: Nepodařilo se uložit přihlášení do cookie_jar."
            exit 1
          fi
          echo "✅ OAuth2 login proveden, cookie uložena do $COOKIE_JAR"
        shell: bash

      - name: HEAD request na GraphQL endpoint s cookie
        run: |
          echo "==> Testuji HEAD request na http://localhost:33001/api/gql s cookie…"
          COOKIE_JAR="cookies.txt"
          # Použijeme hlavičku Cookie pro načtení session
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:33001/api/gql \
            -b "$COOKIE_JAR")
          echo "HTTP status: $HTTP_STATUS"
          # 200 OK nebo 400/405 (Bad Request / Method Not Allowed) jsou akceptovatelná
          if [[ "$HTTP_STATUS" != "200" && "$HTTP_STATUS" != "400" && "$HTTP_STATUS" != "405" ]]; then
            echo "❌ Chyba: Endpoint vrací $HTTP_STATUS místo 200/400/405."
            exit 1
          fi
          echo "✅ HEAD request úspěšný (status $HTTP_STATUS)."
        shell: bash

      - name: GraphQL Introspection Check (curl + cookie)
        id: introspection
        run: |
          echo "==> Provedení introspekčního dotazu na http://localhost:33001/api/gql (s cookie)…"
          COOKIE_JAR="cookies.txt"

          # Introspekční query
          INTROSPECTION_QUERY='{"query":"{ __schema { types { name } } }"}'
          RESPONSE=$(
            curl -s -X POST http://localhost:33001/api/gql \
              -H "Content-Type: application/json" \
              -b "$COOKIE_JAR" \
              -d "$INTROSPECTION_QUERY"
          )

          echo "=== Introspection response: ==="
          echo "$RESPONSE"

          # Ověříme, že odpověď obsahuje "__schema"
          echo "$RESPONSE" | grep '"__schema"' \
            && echo "✅ Introspection OK - nalezen klíč __schema." \
            || (echo "❌ Introspection selhala - nenalezen klíč __schema." && exit 1)

          # Uložíme JSON introspekce jako výstup kroku pro další zpracování, pokud potřebujete
          echo "::set-output name=schema::$RESPONSE"
        shell: bash

      - name: Tear down Docker Compose stack
        if: always()
        run: |
          echo "==> Clean up: Ukončuji Docker Compose stack…"
          docker compose -f docker-compose.hk2025.yml down --volumes
        shell: bash
