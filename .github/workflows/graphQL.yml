# .github/workflows/graphql‚Äêgraphiql-smoke‚Äêtests.yml
name: CI ‚Äì GraphiQL Smoke Test (OAuth2 login ‚Üí GET /graphiql)

on:
  push:
    branches: [ pipelines ]
  pull_request:
    branches: [ pipelines ]

jobs:
  graphiqlsmoke:
    name: Build, Login & Check /graphiql
    runs-on: ubuntu-latest

    env:
      TZ: Europe/Prague
      DEMO_EMAIL: john.newbie@world.com
      DEMO_PASSWORD: john.newbie@world.com

    steps:
      # 1) Checkout repozit√°≈ôe
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Spustit Docker Compose (OAuth2 server + GraphQL backend)
      - name: Start Docker Compose stack
        shell: bash
        run: |
          echo "==> Spou≈°t√≠m Docker Compose stack na pozad√≠‚Ä¶"
          docker compose -f docker-compose.hk2025.yml up -d --build

      # 3) Poƒçkat, a≈æ slu≈æby dokonƒç√≠ healthcheck
      - name: Wait for services to be healthy
        shell: bash
        run: |
          echo "ƒåek√°m 30 sekund, aby se slu≈æby nachystaly‚Ä¶"
          sleep 30

      # 4) (volitelnƒõ) Zkontrolovat bƒõ≈æ√≠c√≠ kontejnery
      - name: Check running containers
        shell: bash
        run: |
          echo "=== Seznam v≈°ech Docker kontejner≈Ø p≈ôed testem: ==="
          docker ps -a

      ######################################################################
      # Krok 1: OAuth2 login ‚Üí st√°hnout login str√°nku, extrahovat key, poslat POST,
      #           a ulo≈æit v√Ωslednou cookie ‚Äúauthorization‚Äù
      ######################################################################
      - name: Perform OAuth2 login and save authorization cookie
        id: login_step
        shell: bash
        run: |
          echo "==> 1) Stahuji login str√°nku (pro z√≠sk√°n√≠ 'key' + poƒç√°teƒçn√≠ cookie)‚Ä¶"
          COOKIE_INIT="cookies_init.txt"
          LOGIN_HTML="login.html"
          LOGIN_URL="http://localhost:33001/oauth/login2?redirect_uri=/"

          # 1. GET login form (ulo≈æ√≠me cookies_init.txt + login.html)
          curl -s -L "$LOGIN_URL" \
            -c "$COOKIE_INIT" \
            -o "$LOGIN_HTML"

          # Debug: vypi≈°me prvn√≠ ≈ô√°dky login.html, a≈• je jasn√©, ≈æe to sed√≠
          echo "‚Üí Obsah login.html (prvn√≠ch 20 ≈ô√°dk≈Ø):"
          head -n 20 "$LOGIN_HTML" || true
          echo "‚Ä¶"

          # 2. Extrahovat skryt√Ω 'key' z HTML (value bez uvozovek)
          echo "==> 2) Extrahuji 'key' ze sta≈æen√©ho HTML‚Ä¶"
          KEY=$(grep -oP 'name="key".*?value=\K[^ >]+' "$LOGIN_HTML" || true)
          if [ -z "$KEY" ]; then
            echo "‚ùå Chyba: Nepoda≈ôilo se naj√≠t hodnotu 'key' v $LOGIN_HTML!"
            echo "‚Äì N√≠≈æe cel√Ω login.html pro debug:"
            cat "$LOGIN_HTML"
            exit 1
          fi
          echo "‚Üí Nalezen KEY: $KEY"

          # 3. POST p≈ôihl√°≈°en√≠ (username + password + key) ‚Üí ulo≈æ√≠ se do cookies_auth.txt
          echo "==> 3) Pos√≠l√°m POST s p≈ôihl√°≈°en√≠m (username + password + key)‚Ä¶"
          COOKIE_AUTH="cookies_auth.txt"
          curl -s -L "$LOGIN_URL" \
            -b "$COOKIE_INIT" \
            -c "$COOKIE_AUTH" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=${DEMO_EMAIL}" \
            -d "password=${DEMO_PASSWORD}" \
            -d "key=${KEY}" \
            -o /dev/null

          # Ovƒõ≈ôit, ≈æe cookies_auth.txt existuje a nen√≠ pr√°zdn√Ω
          if [ ! -s "$COOKIE_AUTH" ]; then
            echo "‚ùå Chyba: Nepoda≈ôilo se ulo≈æit cookie do $COOKIE_AUTH."
            ls -l "$COOKIE_AUTH" || true
            exit 1
          fi

          # Debug: zobrazit cel√Ω obsah cookies_auth.txt
          echo "‚Üí Obsah cookies_auth.txt:"
          cat "$COOKIE_AUTH"

          # 4. Z cookies_auth.txt vyextrahovat hodnotu cookie 'authorization'
          JWT_COOKIE=$(grep -i "authorization" "$COOKIE_AUTH" | awk '{print $7}' | head -n 1 || true)
          if [ -z "$JWT_COOKIE" ]; then
            echo "‚ùå Chyba: V cookie-jar nebyla nalezena cookie 'authorization'!"
            exit 1
          fi

          echo "‚Üí Extrahovan√° hodnota authorization cookie: $JWT_COOKIE"
          # Ulo≈æit JWT (authorization) do GitHub kelu pro dal≈°√≠ kroky
          echo "AUTHORIZATION=$JWT_COOKIE" >> "$GITHUB_OUTPUT"
          echo "‚úÖ OAuth2 login probƒõhl, authorization cookie ulo≈æena."
        # konec run

      ######################################################################
      # Krok 2: Ovƒõ≈ô√≠m, ≈æe GET /graphiql/ vr√°t√≠ 200 OK (pomoc√≠ ulo≈æen√© cookie)
      ######################################################################
      - name: Smoke test GraphiQL UI (GET /graphiql)
        shell: bash
        env:
          # P≈ôeneste hodnotu z p≈ôedchoz√≠ho kroku
          AUTHORIZATION: ${{ steps.login_step.outputs.AUTHORIZATION }}
        run: |
          echo "==> 2) GET /graphiql/ s cookie authorization‚Ä¶"
          if [ -z "${AUTHORIZATION}" ]; then
            echo "‚ùå Chyba: V promƒõnn√© AUTHORIZATION nen√≠ ≈æ√°dn√Ω token! (login selhal nebo cookie nebyla nastavena)"
            exit 1
          fi

          # Provedeme GET a zkontrolujeme stav (200) a p≈ô√≠tomnost textu "<title>GraphiQL</title>"
          RESPONSE_HTTP_CODE=$(
            curl -s -o /dev/null -w "%{http_code}" \
              -H "Cookie: authorization=${AUTHORIZATION}" \
              http://localhost:33001/graphiql/
          )
          echo "HTTP status: $RESPONSE_HTTP_CODE"
          if [ "$RESPONSE_HTTP_CODE" != "200" ]; then
            echo "‚ùå Chyba: /graphiql/ vrac√≠ HTTP $RESPONSE_HTTP_CODE nam√≠sto 200."
            exit 1
          fi
          echo "‚úÖ HTTP 200 OK ‚Äì GraphiQL endpoint dostupn√Ω."

          # Teƒè se pod√≠v√°me na ƒç√°st HTML, abychom vidƒõli, ≈æe obsahuje "<title>GraphiQL</title>"
          BODY=$(curl -s \
            -H "Cookie: authorization=${AUTHORIZATION}" \
            http://localhost:33001/graphiql/ \
          )
          echo "‚Üí V√Ω≈ôez z HTML GraphiQL (prvn√≠ch 200 znak≈Ø):"
          echo "${BODY:0:200}" | sed 's/<[^>]*>/ /g'
          echo "‚Ä¶"

          # Ovƒõ≈ô√≠me, ≈æe str√°nka skuteƒçnƒõ obsahuje GraphiQL UI (nap≈ô. hled√°n√≠m ‚ÄúGraphiQL‚Äù v HTML)
          echo "$BODY" | grep -i "GraphiQL" \
            && echo "‚úÖ Str√°nka obsahuje 'GraphiQL'." \
            || (echo "‚ùå Str√°nka neobsahuje 'GraphiQL'." && exit 1)

      - name: Smoke test GraphiQL UI (GET /graphiql/)
        id: graphql_ui_test
        shell: bash
        # P≈ôeneste si sem tu hodnotu cookie z p≈ôedchoz√≠ho kroku
        env:
          AUTHORIZATION: ${{ steps.login_step.outputs.AUTHORIZATION }}
        run: |
          echo "==> 1) Kontroluji, ≈æe AUTHORIZATION cookie nen√≠ pr√°zdn√°‚Ä¶"
          if [ -z "${AUTHORIZATION}" ]; then
            echo "‚ùå Chyba: promƒõnn√° AUTHORIZATION je pr√°zdn√°. Login selhal nebo cookie nebyla nastavena."
            exit 1
          fi
          echo "‚Üí Pou≈æ√≠v√°m hodnotu AUTHORIZATION cookie: ${AUTHORIZATION:0:20}‚Ä¶ (zkr√°ceno)"

          echo "==> 2) Provedu GET http://localhost:33001/graphiql/ s Cookie: authorization=${AUTHORIZATION}"
          # Nejprve zjist√≠me pouze HTTP k√≥d (nap≈ô. 200)
          HTTP_CODE=$(
            curl -s -o /dev/null -w "%{http_code}" \
              -H "Cookie: authorization=${AUTHORIZATION}" \
              http://localhost:33001/graphiql/
          )
          echo "‚Üí HTTP status: $HTTP_CODE"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå Chyba: /graphiql/ vrac√≠ HTTP $HTTP_CODE nam√≠sto 200."
            exit 1
          fi
          echo "‚úÖ HTTP 200 OK ‚Äì GraphiQL endpoint je dostupn√Ω."

          # Nyn√≠ zkus√≠me st√°hnout malou ƒç√°st HTML a ovƒõ≈ôit, ≈æe opravdu je tam titul 'Strawberry GraphiQL'
          BODY=$(curl -s \
            -H "Cookie: authorization=${AUTHORIZATION}" \
            http://localhost:33001/graphiql/ \
          )
          echo "‚Üí V√Ω≈ôez z HTML (prvn√≠ch 200 znak≈Ø):"
          echo "${BODY:0:200}" | sed 's/<[^>]*>/ /g'  # odstran√≠me tagy, abychom vidƒõli ƒçist√Ω text

          echo "==> 3) Ovƒõ≈ôuji, ≈æe str√°nka opravdu obsahuje 'Strawberry GraphiQL'‚Ä¶"
          echo "$BODY" | grep -q "Strawberry GraphiQL" \
            && echo "‚úÖ Str√°nka obsahuje 'Strawberry GraphiQL'." \
            || (echo "‚ùå Str√°nka neobsahuje titulku 'Strawberry GraphiQL'." && exit 1)

          echo "üéâ GraphiQL smoke test je √∫spƒõ≈°n√Ω."

      ########################################################################
      # Krok 4: Tear down Docker Compose
      ########################################################################
      - name: Tear down Docker Compose stack
        if: always()
        shell: bash
        run: |
          echo "==> Clean up: Ukonƒçuji Docker Compose stack‚Ä¶"
          docker compose -f docker-compose.hk2025.yml down --volumes
        # end of run
