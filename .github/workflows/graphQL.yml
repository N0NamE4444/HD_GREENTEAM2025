# .github/workflows/graphql-smoke-tests.yml
name: CI - GraphQL Smoke Tests (OAuth2 login)

on:
  push:
    branches: [ pipelines ]
  pull_request:
    branches: [ pipelines ]

jobs:
  graphql-smoke:
    name: Build, Login & Run Introspection (cookie‐based JWT)
    runs-on: ubuntu-latest

    env:
      TZ: Europe/Prague
      DEMO_EMAIL: john.newbie@world.com
      DEMO_PASSWORD: john.newbie@world.com

    steps:
      # 1) Checkout repozitáře
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Spustit Docker Compose (OAuth2 server + GraphQL backend)
      - name: Start Docker Compose stack
        shell: bash
        run: |
          echo "==> Spouštím Docker Compose stack na pozadí..."
          docker compose -f docker-compose.hk2025.yml up -d --build

      # 3) Počkat, až služby dokončí healthcheck
      - name: Wait for services to be healthy
        shell: bash
        run: |
          echo "Čekám 30 sekund, aby služby absolvovaly healthcheck..."
          sleep 30

      # 4) (volitelně) Zkontrolovat běžící kontejnery
      - name: Check running containers
        shell: bash
        run: |
          echo "=== Seznam všech Docker kontejnerů před testy: ==="
          docker ps -a

      ########################################################################
      # Krok 1: Přihlášení → stažení cookies + extrakce JWT (cookie 'authorization')
      ########################################################################
      - name: Perform OAuth2 login and extract JWT from cookie
        id: login_step
        shell: bash
        run: |
          echo "==> 1) Stahuji login stránku (GET) a ukládám první cookies…"
          COOKIE_INIT="cookies_init.txt"
          LOGIN_HTML="login.html"
          LOGIN_URL="http://localhost:33001/oauth/login2?redirect_uri=/"

          # 1. GET login form + uložení počátečních cookies do cookies_init.txt
          curl -s -L "$LOGIN_URL" \
            -c "$COOKIE_INIT" \
            -o "$LOGIN_HTML"

          # Debug: část login.html
          echo "→ Obsah login.html (prvních 20 řádků):"
          head -n 20 "$LOGIN_HTML" || true
          echo "..."

          # 2. Z login.html extrahovat hodnotu skrytého pole 'key'
          echo "==> 2) Extrahuji 'key' ze staženého HTML…"
          KEY=$(grep -oP 'name="key".*?value=\K[^ >]+' "$LOGIN_HTML" || true)
          if [ -z "$KEY" ]; then
            echo "❌ Chyba: Nepodařilo se najít hodnotu 'key' v $LOGIN_HTML!"
            echo "Zobrazím celý HTML pro debug:"
            cat "$LOGIN_HTML"
            exit 1
          fi
          echo "→ Nalezen KEY: $KEY"

          # 3. POST přihlášení (username + password + key), výsledné cookies do cookies_auth.txt
          echo "==> 3) Posílám POST s přihlášením…"
          COOKIE_AUTH="cookies_auth.txt"
          curl -s -L "$LOGIN_URL" \
            -b "$COOKIE_INIT" \
            -c "$COOKIE_AUTH" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=${{ env.DEMO_EMAIL }}" \
            -d "password=${{ env.DEMO_PASSWORD }}" \
            -d "key=${KEY}" \
            -o /dev/null

          # Ujistit se, že cookies_auth.txt existuje a má obsah
          if [ ! -s "$COOKIE_AUTH" ]; then
            echo "❌ Chyba: Nepodařilo se uložit cookies do $COOKIE_AUTH."
            ls -l "$COOKIE_AUTH" || true
            exit 1
          fi

          # Debug: zobrazit celý obsah cookies_auth.txt
          echo "→ Obsah cookies_auth.txt:"
          cat "$COOKIE_AUTH"

          # 4. Z cookies_auth.txt vyextrahovat JWT z cookie 'authorization'
          JWT=$(grep -i "authorization" "$COOKIE_AUTH" | awk '{print $7}' | head -n 1 || true)
          if [ -z "$JWT" ]; then
            echo "❌ Chyba: V cookie-jar nebyla nalezena cookie 'authorization'!"
            exit 1
          fi

          # Debug: vypišme celý token (v UI GH Actions bude zamaskován)
          echo "→ Extrahovaný JWT token (cookie 'authorization'):"
          echo "$JWT"

          # 5. Uložit JWT do výstupu tohoto kroku
          echo "jwt=$JWT" >> "$GITHUB_OUTPUT"
          echo "✅ JWT token úspěšně získán a uložen do \$GITHUB_OUTPUT."
        # end of run

      ########################################################################
      # Krok 2: HEAD request na GraphQL endpoint s cookie authorization=<JWT>
      ########################################################################
      - name: HEAD request on GraphQL endpoint (cookie-based auth)
        shell: bash
        run: |
          JWT_TOKEN="${{ steps.login_step.outputs.jwt }}"
          echo "→ Používám JWT token z cookie: $JWT_TOKEN"
          if [ -z "$JWT_TOKEN" ]; then
            echo "❌ Chyba: JWT_TOKEN je prázdný!"
            exit 1
          fi

          # Aby nás nezastavil cURL exit‐kód, použijeme "|| true"
          HTTP_STATUS=$(
            curl -s -o /dev/null -w "%{http_code}" \
              -H "Cookie: authorization=$JWT_TOKEN" \
              http://localhost:33001/api/gql -X HEAD \
              || true
          )
          echo "HTTP status: $HTTP_STATUS"
          if [[ "$HTTP_STATUS" != "200" && "$HTTP_STATUS" != "400" && "$HTTP_STATUS" != "405" ]]; then
            echo "❌ Neočekávaný status $HTTP_STATUS"
            exit 1
          fi
          echo "✅ HEAD request úspěšný (status $HTTP_STATUS)."

      ########################################################################
      # Krok 3: GraphQL Introspection Query s cookie authorization=<JWT>
      ########################################################################
      - name: Perform GraphQL Introspection Query (cookie-based auth)
        shell: bash
        run: |
          JWT_TOKEN="${{ steps.login_step.outputs.jwt }}"
          echo "==> Provedení introspekčního dotazu na /api/gql s cookie auth…"
          echo "→ (debug) použiji EXATNĚ tuto proměnnou: $JWT_TOKEN"

          # Zde DEFINUJEME query v proměnné
          INTROSPECTION_QUERY='{ "query": "{ __schema { types { name } } }" }'

          # A teprve teď ji pošleme přímo přes proměnnou
          RESPONSE=$(
            curl -v -X POST http://localhost:33001/api/gql \
              -H "Content-Type: application/json" \
              -b "cookies_auth.txt" \
              --data "$INTROSPECTION_QUERY"
              || true
          )

          echo "=== Introspection response: ==="
          echo "$RESPONSE"

          echo "$RESPONSE" | grep '"__schema"' \
            && echo "✅ Introspection OK - nalezen klíč __schema." \
            || (echo "❌ Introspection selhala - nenalezen klíč __schema." && exit 1)

      ########################################################################
      # Krok 4: Tear down Docker Compose
      ########################################################################
      - name: Tear down Docker Compose stack
        if: always()
        shell: bash
        run: |
          echo "==> Clean up: Ukončuji Docker Compose stack…"
          docker compose -f docker-compose.hk2025.yml down --volumes
        # end of run
