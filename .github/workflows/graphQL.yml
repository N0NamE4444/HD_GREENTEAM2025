# .github/workflows/graphql-smoke-tests.yml
name: CI - GraphQL Smoke Tests (OAuth2 login)

on:
  push:
    branches: [ pipelines ]
  pull_request:
    branches: [ pipelines ]

jobs:
  graphql-smoke:
    name: Build, Get JWT & Run Introspection in One Job
    runs-on: ubuntu-latest

    env:
      TZ: Europe/Prague
      DEMO_EMAIL: john.newbie@world.com
      DEMO_PASSWORD: john.newbie@world.com

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Start Docker Compose stack
        shell: bash
        run: |
          echo "==> Spouštím Docker Compose stack na pozadí..."
          docker compose -f docker-compose.hk2025.yml up -d --build

      - name: Wait for services to be healthy
        shell: bash
        run: |
          echo "Čekám 30 sekund, aby služby absolvovaly healthcheck..."
          sleep 30

      - name: Check running containers
        shell: bash
        run: |
          echo "=== Seznam všech Docker kontejnerů před testy: ==="
          docker ps -a

      ########################################################################
      # Krok 1: Přihlášení → stažení cookies + extrakce JWT (authorization)
      ########################################################################
      - name: Perform OAuth2 login and extract JWT
        id: extract_jwt
        shell: bash
        run: |
          echo "==> 1) Stahuji login stránku (pro získání 'key' a počáteční cookie)…"
          COOKIE_INIT="cookie_init.txt"
          LOGIN_HTML="login.html"
          LOGIN_URL="http://localhost:33001/oauth/login2?redirect_uri=/"

          # 1. GET login form + uložení počátečních cookies a HTML
          curl -s -L "$LOGIN_URL" \
            -c "$COOKIE_INIT" \
            -o "$LOGIN_HTML"

          # Debug: vypišme část HTML, abychom viděli formulář
          echo "→ Obsah login.html (prvních 20 řádků):"
          head -n 20 "$LOGIN_HTML" || true
          echo "..."

          # 2. Extrahovat hodnotu 'key' (value bez uvozovek)
          echo "==> 2) Extrahuji 'key' ze staženého HTML…"
          KEY=$(grep -oP 'name="key".*?value=\K[^ >]+' "$LOGIN_HTML" || true)
          if [ -z "$KEY" ]; then
            echo "❌ Chyba: Nepodařilo se najít hodnotu 'key' v $LOGIN_HTML!"
            echo "Ukažme celý HTML (kvůli ladění):"
            cat "$LOGIN_HTML"
            exit 1
          fi
          echo "→ Nalezen KEY: $KEY"

          # 3. POST login (username + password + key) → uložíme cookies do cookies.txt
          echo "==> 3) Posílám POST s přihlášením…"
          COOKIE_JAR="cookies.txt"
          curl -s -L "$LOGIN_URL" \
            -b "$COOKIE_INIT" \
            -c "$COOKIE_JAR" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=${{ env.DEMO_EMAIL }}" \
            -d "password=${{ env.DEMO_PASSWORD }}" \
            -d "key=${KEY}" \
            -o /dev/null

          # Zkontrolujme, že cookies.txt existuje a není prázdný
          if [ ! -s "$COOKIE_JAR" ]; then
            echo "❌ Chyba: Nepodařilo se uložit cookie do $COOKIE_JAR."
            ls -l "$COOKIE_JAR" || true
            exit 1
          fi

          # Debug: vypišme celý obsah cookies.txt
          echo "→ Obsah cookies.txt:"
          cat "$COOKIE_JAR"

          # 4. Extrahovat JWT z cookie 'authorization'
          JWT=$(grep -i "authorization" "$COOKIE_JAR" | awk '{print $7}' | head -n 1 || true)
          if [ -z "$JWT" ]; then
            echo "❌ Chyba: V cookie-jar nebyla nalezena hodnota 'authorization'!"
            exit 1
          fi

          # **TADY KONEČNĚ VYPISUJEME CELÝ TOKEN** pro snadné debugování:
          echo "→ Extrahovaný JWT token: $JWT"

          # 5. Uložit JWT do výstupu kroku pro další kroky
          echo "jwt=$JWT" >> "$GITHUB_OUTPUT"
          echo "✅ JWT token úspěšně získán a uložen do $GITHUB_OUTPUT."
        # end of run

      ########################################################################
      # Krok 2: HEAD/GET GraphQL endpoint s JWT
      ########################################################################
      - name: HEAD request on GraphQL endpoint with Bearer token
        shell: bash
        run: |
          JWT_TOKEN="${{ steps.extract_jwt.outputs.jwt }}"
          # **OPĚT TLSK POVOLENÍ VYPISU CELÉHO TOKENU**
          echo "→ Používám JWT: $JWT_TOKEN"
          if [ -z "$JWT_TOKEN" ]; then
            echo "❌ Chyba: JWT_TOKEN je prázdný!"
            exit 1
          fi

          HTTP_STATUS=$(
            curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: Bearer $JWT_TOKEN" \
              http://localhost:33001/api/gql -X HEAD
          )
          echo "HTTP status: $HTTP_STATUS"
          if [[ "$HTTP_STATUS" != "200" && "$HTTP_STATUS" != "400" && "$HTTP_STATUS" != "405" ]]; then
            echo "❌ Neočekávaný status $HTTP_STATUS"
            exit 1
          fi
          echo "✅ HEAD request úspěšný (status $HTTP_STATUS)."

      ########################################################################
      # Krok 3: GraphQL Introspection Query s JWT
      ########################################################################
      - name: Perform GraphQL Introspection Query
        shell: bash
        run: |
          JWT_TOKEN="${{ steps.extract_jwt.outputs.jwt }}"
          echo "==> Provedení introspekčního dotazu na /api/gql s Bearer tokenem…"
          echo "→ (pro kontrolu) znovu JWT: $JWT_TOKEN"
          INTROSPECTION_QUERY='{"query":"{ __schema { types { name } } }"}'
          RESPONSE=$(
            curl -s -X POST http://localhost:33001/api/gql \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $JWT_TOKEN" \
              -d "$INTROSPECTION_QUERY"
          )

          echo "=== Introspection response: ==="
          echo "$RESPONSE"

          echo "$RESPONSE" | grep '"__schema"' \
            && echo "✅ Introspection OK - nalezen klíč __schema." \
            || (echo "❌ Introspection selhala - nenalezen klíč __schema." && exit 1)

      ########################################################################
      # Krok 4: Tear down Docker Compose
      ########################################################################
      - name: Tear down Docker Compose stack
        if: always()
        shell: bash
        run: |
          echo "==> Clean up: Ukončuji Docker Compose stack…"
          docker compose -f docker-compose.hk2025.yml down --volumes
        # end of run
