name: "Validate systemdata JSON Files"

on:
  push:
    branches: [ pipelines ]
  pull_request:
    branches: [ pipelines ]

jobs:
  validate-json:
    name: "JSON Format & Key Validation"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Validate JSON format and required keys
        run: |
          set -euo pipefail

          FILES=( systemdata*.json )
          if [ -z "${FILES[*]}" ] || [ "${FILES[0]}" = "systemdata*.json" ]; then
            echo "No files matched the pattern 'systemdata*.json'."
            exit 1
          fi

          REQUIRED_KEYS=(
            "rolecategories"
            "roletypes"
            "groupcategories"
            "grouptypes"
            "users"
            "groups"
            "roles"
            "memberships"
            "facilitytypes"
            "facilities"
            "acprograms"
            "acprograms_studentstates"
            "acprograms_students"
            "acsubjects"
            "acsemesters"
            "actopics"
            "aclessons"
            "acprogramforms"
            "acprogramlanguages"
            "acprogramlevels"
            "acprogramtitles"
            "acprogramtypes"
            "acclassificationlevels"
            "acclassificationtypes"
            "aclessontypes"
            "acclassifications"
            "plans"
            "plan_lessons"
            "plan_lessons_users"
            "plan_lessons_facilities"
            "plan_lessons_groups"
            "events"
            "eventtypes"
            "eventinvitationtypes"
            "eventpresencetypes"
            "events_users"
            "facilities_events"
            "events_groups"
            "projects"
            "projecttypes"
            "projectmilestones"
            "projectcategories"
            "projectfinances"
            "projectfinancetypes"
            "projectfinancecategories"
            "formtypes"
            "formcategories"
            "formitemcategories"
            "formitemtypes"
            "statemachines"
            "statemachinetypes"
            "states"
            "statetransitions"
            "roletypelists"
            "formrequests"
            "formhistories"
            "forms"
            "formsections"
            "formparts"
            "formitems"
            "surveys"
            "surveytypes"
            "surveyquestions"
            "surveyquestiontypes"
            "surveyanswers"
            "externalidtypes"
            "externalidcategories"
            # optionally add other required keys
          )

          # Variable to track if any file failed validation
          ANY_FAIL=false

          for FILE in "${FILES[@]}"; do
            echo "=============================================="
            echo "Checking file: $FILE"
            echo "----------------------------------------------"

            if [ ! -f "$FILE" ]; then
              echo "File not found: $FILE"
              ANY_FAIL=true
              # Continue to next file; do not stop the whole action
              continue
            fi

            echo "→ Validating JSON syntax for $FILE …"
            if ! jq empty "$FILE" 2>/dev/null; then
              echo "$FILE is not valid JSON."
              ANY_FAIL=true
              # Even if JSON is invalid, continue checking other files
              continue
            fi
            echo "$FILE is valid JSON."

            echo "→ Verifying required keys in $FILE …"
            # Load keys from JSON (one key per line)
            FILE_KEYS=$(jq -r 'keys_unsorted[]' "$FILE")
            MISSING=false

            for KEY in "${REQUIRED_KEYS[@]}"; do
              if ! grep -qx "$KEY" <<< "$FILE_KEYS"; then
                echo "Missing required key '$KEY' in $FILE"
                MISSING=true
              else
                echo "Found key '$KEY' in $FILE"
              fi
            done

            if [ "$MISSING" = true ]; then
              echo "One or more required keys are missing in $FILE."
              ANY_FAIL=true
            else
              echo "All required keys are present in $FILE."
            fi

            echo
          done

          echo "=============================================="
          if [ "$ANY_FAIL" = true ]; then
            echo "One or more systemdata JSON files FAILED validation."
            exit 1
          else
            echo "All systemdata JSON files passed validation."
            exit 0
          fi
